open Sexplib.Std;
open Util.OptUtil.Syntax;

/* SOURCE: Hazel type annotated with a relevant source location.
   Currently used to track match branches for inconsistent
   branches errors, but could perhaps be used more broadly
   for type debugging UI. */
[@deriving (show({with_path: false}), sexp, yojson)]
type source = {
  id: int,
  ty: Typ.t,
};

[@deriving (show({with_path: false}), sexp, yojson)]
type self_error =
  | Multi
  | NoFun(Typ.t)
  | Free
  | FreeTag;

/* SELF: The (synthetic) type information derivable from a term
   in isolation, using the typing context but not the syntactic
   context. This can either be Free (no type, in the case of
   unbound/undefined names), Joined (a list of types, possibly
   inconsistent, generated by branching forms like ifs,
   matches, and list literals), or Just a regular type. */
[@deriving (show({with_path: false}), sexp, yojson)]
type self =
  | Just(Typ.t)
  | NoJoin(list(source))
  | Self(self_error);

/* Expressions are assigned a mode (reflecting the static expectations
   if any of their syntactic parent), a self (reflecting what their
   statics would be in isolation), a context (variables in scope), and
   free (variables occuring free in the expression. */
[@deriving (show({with_path: false}), sexp, yojson)]
type info_exp = {
  cls: Term.UExp.cls,
  term: Term.UExp.t,
  mode: Typ.mode,
  self,
  ctx: Ctx.t,
  free: Ctx.co,
};

/* Patterns are assigned a mode (reflecting the static expectations
   if any of their syntactic parent) and a self (reflecting what their
   statics would be in isolation), a context (variables in scope) */
[@deriving (show({with_path: false}), sexp, yojson)]
type info_pat = {
  cls: Term.UPat.cls,
  term: Term.UPat.t,
  mode: Typ.mode,
  self,
  ctx: Ctx.t // TODO: detect in-pattern shadowing
};

/* A type can be either valid or a free type variable.
   The additional errors statuses are fundamentally
   syntactic and should eventually be reimplemeted
   via a seperate sort */
[@deriving (show({with_path: false}), sexp, yojson)]
type status_typ =
  | Ok(Typ.t)
  | FreeTypeVar
  | DuplicateTag
  | ApOutsideSum
  | TagExpected(Typ.t);

[@deriving (show({with_path: false}), sexp, yojson)]
type status_variant =
  | Unique
  | Duplicate;

[@deriving (show({with_path: false}), sexp, yojson)]
type typ_mode =
  | TypeExpected
  | TagExpected(status_variant)
  | VariantExpected(status_variant);

[@deriving (show({with_path: false}), sexp, yojson)]
type info_typ = {
  cls: Term.UTyp.cls,
  term: Term.UTyp.t,
  mode: typ_mode,
  ctx: Ctx.t,
  status: status_typ,
};

[@deriving (show({with_path: false}), sexp, yojson)]
type info_rul = {
  cls: Term.URul.cls,
  term: Term.UExp.t,
};

/* Either a type pattern is a valid name or it's an error */
[@deriving (show({with_path: false}), sexp, yojson)]
type status_tpat =
  | Ok
  | NotAName;

[@deriving (show({with_path: false}), sexp, yojson)]
type info_tpat = {
  cls: Term.UTPat.cls,
  term: Term.UTPat.t,
  status: status_tpat,
};

/* The Info aka Cursorinfo assigned to each subterm. */
[@deriving (show({with_path: false}), sexp, yojson)]
type t =
  | Invalid(TermBase.parse_flag)
  | InfoExp(info_exp)
  | InfoPat(info_pat)
  | InfoTyp(info_typ)
  | InfoRul(info_rul)
  | InfoTPat(info_tpat);

/* Static error classes */

[@deriving (show({with_path: false}), sexp, yojson)]
type error =
  | Self(self_error)
  | SynInconsistentBranches(list(Typ.t))
  | TypeInconsistent(Typ.t, Typ.t);

/* Statics non-error classes */
[@deriving (show({with_path: false}), sexp, yojson)]
type happy =
  | SynConsistent(Typ.t)
  | AnaConsistent(Typ.t, Typ.t, Typ.t) //ana, syn, join
  | AnaInternalInconsistent(Typ.t, list(Typ.t)); // ana, branches

/* The error status which 'wraps' each term. */
[@deriving (show({with_path: false}), sexp, yojson)]
type error_status =
  | InHole(error)
  | NotInHole(happy);

/* Strip location information from a list of sources */
let source_tys = List.map((source: source) => source.ty);

/* Determines whether an expression or pattern is in an error hole,
   depending on the mode, which represents the expectations of the
   surrounding syntactic context, and the self which represents the
   makeup of the expression / pattern itself. */
let error_status = (ctx: Ctx.t, mode: Typ.mode, self: self): error_status =>
  switch (mode, self) {
  | (SynFun, Just(ty)) =>
    switch (Typ.join(ctx, Arrow(Unknown(Internal), Unknown(Internal)), ty)) {
    | None => InHole(Self(NoFun(ty)))
    | Some(_) => NotInHole(SynConsistent(ty))
    }
  | (Syn | SynFun, NoJoin(tys)) =>
    InHole(SynInconsistentBranches(source_tys(tys)))
  | (Syn | SynFun | Ana(_), Self(Multi)) =>
    NotInHole(SynConsistent(Unknown(Internal)))
  | (Syn | SynFun | Ana(_), Self(error)) => InHole(Self(error))
  | (Syn, Just(ty)) => NotInHole(SynConsistent(ty))
  | (Ana(ty_ana), Just(ty_syn)) =>
    switch (Typ.join(ctx, ty_ana, ty_syn)) {
    | None => InHole(TypeInconsistent(ty_syn, ty_ana))
    | Some(ty_join) => NotInHole(AnaConsistent(ty_ana, ty_syn, ty_join))
    }
  | (Ana(ty_ana), NoJoin(tys)) =>
    NotInHole(AnaInternalInconsistent(ty_ana, source_tys(tys)))
  };

/* Determines whether any term is in an error hole. Currently types cannot
   be in error, and Invalids (things to which Term was unable to assign a
   parse) are always in error. The error status of expressions and patterns
   are determined by error_status above. */
let is_error = (ci: t): bool => {
  switch (ci) {
  | Invalid(Secondary) => false
  | Invalid(_) => true
  | InfoExp({mode, self, ctx, _})
  | InfoPat({mode, self, ctx, _}) =>
    switch (error_status(ctx, mode, self)) {
    | InHole(_) => true
    | NotInHole(_) => false
    }
  | InfoTyp({status, _}) =>
    switch (status) {
    | Ok(_) => false
    | _ => true
    }
  | InfoTPat({status, _}) => status != Ok
  | InfoRul(_) => false
  };
};

let status_tpat = (utpat: Term.UTPat.t): status_tpat =>
  switch (utpat.term) {
  | Var(_) => Ok
  | _ => NotAName
  };

/* Determined the type of an expression or pattern 'after hole wrapping';
   that is, all ill-typed terms are considered to be 'wrapped in
   non-empty holes', i.e. assigned Unknown type. */
let typ_after_fix = (ctx, mode: Typ.mode, self: self): Typ.t =>
  switch (error_status(ctx, mode, self)) {
  | InHole(_) => Unknown(Internal)
  | NotInHole(SynConsistent(t)) => t
  | NotInHole(AnaConsistent(_, _, ty_join)) => ty_join
  | NotInHole(AnaInternalInconsistent(ty_ana, _)) => ty_ana
  };

let typ_after_fix_opt = (ctx, info: t): option(Typ.t) =>
  switch (info) {
  | InfoExp({mode, self, _})
  | InfoPat({mode, self, _}) => Some(typ_after_fix(ctx, mode, self))
  | InfoTyp(_)
  | InfoRul(_)
  | InfoTPat(_)
  | Invalid(_) => None
  };

let typ_of_self: self => Typ.t =
  fun
  | Just(t) => t
  | NoJoin(_)
  | Self(_) => Unknown(Internal);

let typ_of_self_opt = (info: t): option(Typ.t) =>
  switch (info) {
  | InfoExp({self, _})
  | InfoPat({self, _}) => Some(typ_of_self(self))
  | InfoTyp(_)
  | InfoRul(_)
  | InfoTPat(_)
  | Invalid(_) => None
  };

let get_binding_site = (info: t): option(Id.t) => {
  switch (info) {
  | InfoExp({term: {term: Var(name) | Tag(name), _}, ctx, _})
  | InfoPat({term: {term: Tag(name), _}, ctx, _})
  | InfoTyp({term: {term: Var(name), _}, ctx, _}) =>
    let+ entry = Ctx.lookup(ctx, name);
    Ctx.get_id(entry);
  | _ => None
  };
};

let lookup_tag = (ctx: Ctx.t, name: string): option(Ctx.var_entry) =>
  switch (Ctx.lookup(ctx, name)) {
  | Some(TagEntry(t)) => Some(t)
  | _ => None
  };

let tag_self = (ctx: Ctx.t, mode: Typ.mode, tag: Token.t): self =>
  /* If a tag is being analyzed against (an arrow type returning)
     a sum type having that tag as a variant, its self type is
     considered to be determined by the sum type; otherwise,
     check the context for the tag's type */
  switch (Typ.tag_ana_typ(ctx, mode, tag)) {
  | Some(ana_ty) => Just(ana_ty)
  | _ =>
    switch (lookup_tag(ctx, tag)) {
    | Some(syn) => Just(syn.typ)
    | None => Self(FreeTag)
    }
  };
